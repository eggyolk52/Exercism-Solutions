(import (rnrs))

(define (balanced?* str)
  (let ((len (string-length str)))
    (let loop ((i 0)
               (parens 0)
               (brackets 0)
               (braces 0))

      (if (and (< i len) (>= parens 0) (>= brackets 0) (>= parens 0))
          (let ((char (string-ref str i)))
            (cond
             ((char=? #\( char) (set! parens (+ parens 1)))
             ((char=? #\) char) (set! parens (- parens 1)))
             ((char=? #\[ char) (set! brackets (+ brackets 1)))
             ((char=? #\] char) (set! brackets (- brackets 1)))
             ((char=? #\{ char) (set! braces (+ braces 1)))
             ((char=? #\} char) (set! braces (- braces 1))))
            (loop (+ i 1) parens brackets braces))
          (if (and (= parens 0) (= brackets 0) (= braces 0))
              #t
              #f)))))

(define (matching? opening closing)
  (or (and (char=? #\( opening)
           (char=? #\) closing))
      (and (char=? #\[ opening)
           (char=? #\] closing))
      (and (char=? #\{ opening)
           (char=? #\} closing))))

(define (balanced? str)
  (let ((len (string-length str))
        (stack '()))
    (for-each (lambda (char)
                (if (member char '(#\( #\[ #\{ #\) #\] #\}))
                    (set! stack (cons char stack)))
                (if (and (>= (length stack) 2)
                         (matching? (cadr stack) (car stack)))
                    (set! stack (cddr stack))))
              (string->list str))
    (null? stack)))
